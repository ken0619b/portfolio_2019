{"version":3,"sources":["components/About.js","components/Work.js","plugins/firebase.js","components/ui/Buttom.js","components/ui/TextField.js","components/Comment.js","App.js","serviceWorker.js","index.js"],"names":["i18next","init","fallbackLng","debug","resources","en","translation","enLocalesTranslationJson","ja","jaLocalesTranslationJson","About","state","react_default","a","createElement","className","t","Component","Work","edges","_this2","this","client","ApolloClient","uri","request","operation","setContext","headers","authorization","concat","process","query","gql","_templateObject","then","result","setState","data","repositoryOwner","pinnedRepositories","console","log","map","repo","index","key","node","name","description","href","url","firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","withStyles","theme","button","margin","spacing","unit","input","display","cssRoot","color","backgroundColor","&:hover","props","classes","children","Button_default","variant","size","onClick","click","textField","marginLeft","marginRight","width","label","TextField_default","id","type","value","onChange","change","commentsRef","database","ref","Comment","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","commentSubmitHandler","event","preventDefault","newComment","newComments","toConsumableArray","comments","child","update","handleTextFieldChange","target","off","on","snapshot","_comments","val","bind","comment","ui_TextField","Buttom","App","Switch","react","Link","to","Route","path","component","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f5fe3cff.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport i18next from 'i18next';\nimport enLocalesTranslationJson from '../locales/en/translation'\nimport jaLocalesTranslationJson from '../locales/ja/translation'\n\ni18next.init({\n    fallbackLng: 'en',\n    debug: true,\n    resources: {\n      en: {\n        translation: enLocalesTranslationJson\n      },\n      ja: {\n        translation: jaLocalesTranslationJson\n      }\n    }\n  });\n\nclass About extends Component {  \n\n  state = {\n  }\n\n  render() {\n    return (\n      <div className=\"intro-wrapper\">\n        <h2 className=\"section_header\">{i18next.t('summary.title')}</h2>\n        <p>{i18next.t('summary.texts.0')}</p>\n        <p>{i18next.t('summary.texts.1')}</p>\n        <p>{i18next.t('summary.texts.2')}</p>\n      </div>\n      )\n  }\n}\n\nexport default About;","import React, { Component } from 'react';\nimport ApolloClient from \"apollo-boost\";\nimport gql from \"graphql-tag\";\n\nclass Work extends Component {  \n\n  state = {\n    edges: []\n  }\n\n  componentDidMount() {\n    const client = new ApolloClient({\n      uri: 'https://api.github.com/graphql',\n      request: operation => {\n        operation.setContext({\n          headers: {\n            authorization: `Bearer ${\n              process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN\n            }`\n          }\n        });\n      }\n    });\n\n    const query = gql`\n    {\n      repositoryOwner(login: \"ken840619\") {\n        ... on User {\n          pinnedRepositories(first: 10) {\n            edges {\n              node {\n                name,\n                url,\n                description,\n              }\n            }\n          }\n        }\n      }\n    }`\n\n    client.query({ query })\n    // .then(result => console.log(result.data.repositoryOwner.pinnedRepositories.edges));\n    .then(result => this.setState({ edges: result.data.repositoryOwner.pinnedRepositories.edges }));\n\n    console.log(this.state.edges)\n  }\n\n  render() {\n    return (\n      <section>\n        <h2 className=\"section_header\">My Works</h2>\n        <div className=\"work_wrapper\">\n      {this.state.edges.map((repo, index) => {\n        return (\n        <div className=\"work_item\" key={index}>\n          <div className=\"work_item__title\">{repo.node.name}</div>\n          <div className=\"work_item__desc\">{repo.node.description}</div>\n          <div className=\"work_item__link\">\n            <a href={repo.node.url}>Check It !</a>\n          </div>\n        </div>);\n      })}\n       </div>\n      </section>\n    )\n  }\n}\n\nexport default Work;","import firebase from \"firebase\";\n\nconst config = {\n  apiKey: process.env.REACT_APP_APIKEY,\n  authDomain: process.env.REACT_APP_AUTHDOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASEURL,\n  projectId: process.env.REACT_APP_PROJECTID,\n  storageBucket: process.env.REACT_APP_STORAGEBUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGINGSENDERID\n};\n\nconst firebaseApp = firebase.initializeApp(config);\nexport default firebaseApp","import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\n\nconst styles = theme => ({\n  button: {\n    margin: theme.spacing.unit\n  },\n  input: {\n    display: \"none\"\n  },\n  cssRoot: {\n    color: \"#4ea9da\",\n    backgroundColor: \"#fff\",\n    \"&:hover\": {\n      backgroundColor: \"#daedf7\"\n    }\n  }\n});\n\nconst CustomeButton = props => {\n  const { classes, children } = props;\n  return <Button variant=\"contained\" className={classes.cssRoot} size=\"medium\" onClick={props.click}>{children}</Button>;\n};\n\nexport default withStyles(styles)(CustomeButton);","import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst styles = theme => ({\n  textField: {\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n    width: 300\n  }\n});\n\nconst CustomeTextField = props => {\n  const { classes,label } = props;\n  return (\n    <TextField\n      id=\"standard-name\"\n      type=\"text\"\n      name=\"text\"\n      value={props.value}\n      label={label}\n      onChange={props.change}\n      className={classes.textField}\n      margin=\"normal\"\n      variant=\"outlined\"\n    />\n  );\n}\n\nexport default withStyles(styles)(CustomeTextField);\n\n","import React, { Component } from 'react';\nimport firebaseApp from '../plugins/firebase';\nimport CustomeButton from './ui/Buttom'; //material-ui\nimport CustomeTextField from './ui/TextField';\n\n// firebase\nconst firebaseDb = firebaseApp.database();\nconst commentsRef = firebaseDb.ref('data')\n\n// const functions = firebase.functions();  //cloud functions\n\nclass Comment extends Component {  \n  constructor(props) {\n    super(props);\n    this.state = {\n      comments: [],\n      newComment: '',\n    };\n  }\n  \n  componentWillUnmount() {\n    // firebase read off\n    if (this.commentsRef) {\n      this.commentsRef.off();\n    }\n  }\n\n  componentDidMount(){\n    // firebase read\n    commentsRef.on(\"value\", snapshot => {\n      let _comments = [];\n      if(snapshot.val()){\n        _comments = snapshot.val().comments\n      }\n      \n      this.setState({\n        comments: _comments\n    });\n    }).bind(this);\n  }\n\n  commentSubmitHandler = (event) => {\n    event.preventDefault();\n    console.log(`the button has been pressed with new comment:${this.state.newComment}`);\n\n    let newComments = [...this.state.comments, this.state.newComment]\n\n    commentsRef.child('comments').update(newComments);\n\n    this.setState({\n      comments: newComments,\n      newComment: ''\n    });\n  }\n\n  handleTextFieldChange = (event) => {\n    this.setState({\n        newComment: event.target.value\n    });\n  }\n\n  render() {\n    return (\n    <section>\n      <h2 className=\"section_header\">Comments from everyone !</h2>\n      <div className=\"comment_wrapper\">\n        {this.state.comments.map((comment, index) => {\n          return (\n          <div className=\"comment_item\" key={index}>\n            <div>{comment}</div>\n          </div>);\n        })}\n      </div>\n      <div className=\"comment_ui_wrapper\">\n        <CustomeTextField\n              id=\"standard-name\"\n              label=\"Leave Your Comment Here...\"\n              value={this.state.newComment}\n              margin=\"normal\"\n              change={this.handleTextFieldChange}\n            />\n        <CustomeButton click={this.commentSubmitHandler}>Comment</CustomeButton>\n      </div>\n    </section>\n    )\n  }\n}\n\nexport default Comment;","import React, { Component,Fragment } from 'react';\nimport './App.css';\nimport About from './components/About';\nimport Work from './components/Work';\nimport Comment from './components/Comment';\nimport { Route, Link, Switch } from 'react-router-dom'; // react-route\n\nimport i18next from 'i18next';\nimport enLocalesTranslationJson from './locales/en/translation'\nimport jaLocalesTranslationJson from './locales/ja/translation'\n\ni18next.init({\n  fallbackLng: 'en',\n  debug: true,\n  resources: {\n    en: {\n      translation: enLocalesTranslationJson\n    },\n    ja: {\n      translation: jaLocalesTranslationJson\n    }\n  }\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n      <div className=\"wrapper\">\n        <Switch>\n          <Fragment>\n            <nav className=\"nav\">\n              <div className=\"nav__item\"><Link to='/about'>About</Link></div>\n              <div className=\"nav__item\"><Link to='/work'>Work</Link></div>\n              <div className=\"nav__item\"><Link to='/comment'>Comment</Link></div>\n            </nav>\n            <div className=\"intro-wrapper\">\n              <h2 className=\"intro-name\">{i18next.t('greeting')}</h2>\n              <p className=\"intro-tagline\"><span className=\"highlight\">{i18next.t('job_title')}</span></p>\n            </div>\n            <Route path='/about' component={About} />\n            <Route path='/work' component={Work} />\n            <Route path='/comment' component={Comment} />\n          </Fragment>\n        </Switch>\n      </div>\n      <footer className=\"footer\">2019 Kenichi Ukai</footer>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter} from 'react-router-dom';\n\n  ReactDOM.render(\n      <BrowserRouter>\n        <App/>\n      </BrowserRouter>,\n    document.getElementById('root')\n  );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}